<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[搭建博客--Github Pages和Hexo简明教程]]></title>
      <url>%2F2016%2F11%2F06%2F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-Github-Pages%E5%92%8CHexo%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[#搭建博客–Github Pages和Hexo教程 ##一、Gitub的优点 GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。 GitHub可以免费使用，并且快速稳定。 Github上面的世界很精彩，用久了你的眼界会开阔很多。 推荐Git教程 廖雪峰git教程 阮一峰git教程 ##二、什么是Gitub Pages Github Pages可以被认为是用户编写的、托管在github上的静态网页。 pages官网 ##依赖环境 node.js相信很多人都会node.js有过了解了，直接到官网下载安装即可，安装过程直接next就可以无需配置环境变量也 git直接下载安装就行下载地址 ##HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 ##一、Hexo安装 桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装 npm install -g hexo 假如网络环境不好可以通过安装cnpm，更换taobao的npm源重新尝试安装 ##Hexo初始化配置 创建Hexo文件夹，目录根据自己的爱好（如：D:\Hexo） 进入目录然后右键鼠标点击Git Bash Here，执行 $ hexo init $ npm install##安装Hexo插件 npm install hexo-generator-index –save npm install hexo-generator-archive –save npm install hexo-generator-category –save npm install hexo-generator-tag –save npm install hexo-server –save npm install hexo-deployer-git –save npm install hexo-deployer-heroku –save npm install hexo-deployer-rsync –save npm install hexo-deployer-openshift –save npm install hexo-renderer-marked@0.2 –save npm install hexo-renderer-stylus@0.2 –save npm install hexo-generator-feed@1 –save npm install hexo-generator-sitemap@1 –save##本地查看效果 hexo generate hexo server ##将博客部署到Github Pages上那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。 ##参考资料 如何搭建一个独立博客——简明 Github Pages与 jekyll 教程 小白简书教程 Markdown入门手册中文版]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[原生js封装的建议jqq库]]></title>
      <url>%2F2016%2F11%2F06%2F%E5%8E%9F%E7%94%9Fjs%E5%B0%81%E8%A3%85%E7%9A%84%E5%BB%BA%E8%AE%AEjqq%E5%BA%93%2F</url>
      <content type="text"><![CDATA[#原生js封装的简易的jq库 ##封装时间绑定 function myAddEvent(obj, sEv, fn) //事件绑定 { if(obj.attachEvent) { obj.attachEvent(&apos;on&apos; + sEv, function(){ if(false==fn.call(obj)) { event.cancelBubble=true; return false; }; }); } else { obj.addEventListener(sEv, function(ev){ if(false==fn.call(obj)) { ev.cancelBubble=true; ev.preventDefault(); }; }, false); } }; ##封装用class样式选取元素事件 function getByClass(oParent, sClass) //用class选取元素 { var aEle=oParent.getElementsByTagName(&apos;*&apos;); var aResult=[]; var i=0; for(i=0; i&lt;aEle.length; i++) { if(aEle[i].className == sClass) { aResult.push(aEle[i]); } } return aResult; }; ##封装获取外联样式表样式 function getStyle(obj, attr) //获取样式 { if(obj.currentStyle) { return obj.currentStyle[attr]; } else { return getComputedStyle(obj, false)[attr]; } }; ##VQuery函数相当于jq的$符号 function VQuery(vArg) { this.elements=[]; //用来保存选中的元素 switch(typeof vArg) { case &apos;function&apos;: //传过来的如果是个函数 myAddEvent(window,&apos;load&apos;,vArg); break; case &apos;string&apos;: //传过来的如果是字符串类型 switch(vArg.charAt(0)) { case &apos;#&apos;: //ID var obj=document.getElementById(vArg.substring(1)); this.elements.push(obj); break; case &apos;.&apos;: //class this.elements=getByClass(document, vArg.substring(1)); break; default: //tagName this.elements=document.getElementsByTagName(vArg); } break; case &apos;object&apos;: this.elements.push(vArg); break; } }; ##在原型上添加click事件以方便后续的调用 返回this当前函数了，是为了想jq一样可以连缀的写法 VQuery.prototype.click=function (fn) { var i=0; for(i=0; i&lt;this.elements.length; i++) { myAddEvent(this.elements[i], &apos;click&apos;, fn); } return this; }; VQuery.prototype.show=function() { var i=0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i].style.display = &apos;block&apos;; } return this; }; VQuery.prototype.hide=function() { var i=0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i].style.display = &apos;none&apos;; } return this; }; VQuery.prototype.hover=function (fnOver, fnOut) { var i=0; for(i=0; i&lt;this.elements.length; i++) { myAddEvent(this.elements[i], &apos;mouseover&apos;, fnOver); myAddEvent(this.elements[i], &apos;mouseout&apos;, fnOut); } return this; }; VQuery.prototype.css=function(attr, value) { if(arguments.length==2) //设置样式 { var i = 0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i].style[attr]=value; } } else //获取样式 { if(typeof attr==&apos;string&apos;) { return getStyle(this.elements[0], attr); } else { for(i=0;i&lt;this.elements.length;i++) { var k=&apos;&apos;; for(k in attr) { this.elements[i].style[k]=attr[k]; } } } } return this; }; VQuery.prototype.toggle=function() { var i =0; var _arguments=arguments; //存在arguments为了防止调用addToggle获取不到arguments for(i=0; i&lt;this.elements.length; i++) { addToggle(this.elements[i]); } function addToggle(obj) { var count=0; myAddEvent(obj, &apos;click&apos;, function(){ _arguments[count++ % _arguments.length].call(obj); }); } return this; }; VQuery.prototype.attr=function(attr, value) { if(arguments.length==2) { var i=0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i][attr]=value; //设置属性 } } else { return this.elements[0][attr]; //返回属性 } return this; }; VQuery.prototype.eq=function(n) { return $(this.elements[n]); } function appendArr(arr1, arr2) { var i=0; for(i=0; i&lt;arr2.length; i++) { arr1.push(arr2[i]); } } VQuery.prototype.find=function(str) { var i=0; var aResult=[]; for(i=0; i&lt;this.elements.length; i++) { switch(str.charAt(0)) { case &apos;.&apos;: //class var aEle=getByClass(this.elements[i], str.substring(1)); aResult=aResult.concat(aEle); break; default: //标签 var aEle=this.elements[i].getElementsByTagName(str); appendArr(aResult,aEle); } } var newVquery=$(); newVquery.elements=aResult; return newVquery; }; function getIndex(obj) { var aBrother=obj.parentNode.children; var i=0; for(i=0; i&lt;aBrother.length; i++) { if(aBrother[i]==obj) { return i; } } } VQuery.prototype.index=function() { return getIndex(this.elements[0]); } function $(vArg) { return new VQuery(vArg); }; VQuery.prototype.bind=function(sEv, fn) { var i=0; for(i=0;i&lt;this.elements.length;i++) { myAddEvent(this.elements[i], sEv, fn); } }; VQuery.prototype.extend=function(name, fn) { VQuery.prototype[name]=fn; } $().extend(&apos;size&apos;, function(){ return this.elements.length; }); $().extend(&apos;animate&apos;, function(json){ var i=0; for(i=0; i&lt;this.elements.length; i++) { startMove(this.elements[i], json); } }); ###本篇内容是根据网上视频内容学习的结果，]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F11%2F03%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
