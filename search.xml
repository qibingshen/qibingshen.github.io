<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[原生js封装的建议jqq库]]></title>
      <url>%2F2016%2F11%2F06%2F%E5%8E%9F%E7%94%9Fjs%E5%B0%81%E8%A3%85%E7%9A%84%E5%BB%BA%E8%AE%AEjqq%E5%BA%93%2F</url>
      <content type="text"><![CDATA[#原生js封装的简易的jq库 ##封装时间绑定 function myAddEvent(obj, sEv, fn) //事件绑定 { if(obj.attachEvent) { obj.attachEvent(&apos;on&apos; + sEv, function(){ if(false==fn.call(obj)) { event.cancelBubble=true; return false; }; }); } else { obj.addEventListener(sEv, function(ev){ if(false==fn.call(obj)) { ev.cancelBubble=true; ev.preventDefault(); }; }, false); } }; ##封装用class样式选取元素事件 function getByClass(oParent, sClass) //用class选取元素 { var aEle=oParent.getElementsByTagName(&apos;*&apos;); var aResult=[]; var i=0; for(i=0; i&lt;aEle.length; i++) { if(aEle[i].className == sClass) { aResult.push(aEle[i]); } } return aResult; }; ##封装获取外联样式表样式 function getStyle(obj, attr) //获取样式 { if(obj.currentStyle) { return obj.currentStyle[attr]; } else { return getComputedStyle(obj, false)[attr]; } }; ##VQuery函数相当于jq的$符号 function VQuery(vArg) { this.elements=[]; //用来保存选中的元素 switch(typeof vArg) { case &apos;function&apos;: //传过来的如果是个函数 myAddEvent(window,&apos;load&apos;,vArg); break; case &apos;string&apos;: //传过来的如果是字符串类型 switch(vArg.charAt(0)) { case &apos;#&apos;: //ID var obj=document.getElementById(vArg.substring(1)); this.elements.push(obj); break; case &apos;.&apos;: //class this.elements=getByClass(document, vArg.substring(1)); break; default: //tagName this.elements=document.getElementsByTagName(vArg); } break; case &apos;object&apos;: this.elements.push(vArg); break; } }; ##在原型上添加click事件以方便后续的调用 返回this当前函数了，是为了想jq一样可以连缀的写法 VQuery.prototype.click=function (fn) { var i=0; for(i=0; i&lt;this.elements.length; i++) { myAddEvent(this.elements[i], &apos;click&apos;, fn); } return this; }; VQuery.prototype.show=function() { var i=0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i].style.display = &apos;block&apos;; } return this; }; VQuery.prototype.hide=function() { var i=0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i].style.display = &apos;none&apos;; } return this; }; VQuery.prototype.hover=function (fnOver, fnOut) { var i=0; for(i=0; i&lt;this.elements.length; i++) { myAddEvent(this.elements[i], &apos;mouseover&apos;, fnOver); myAddEvent(this.elements[i], &apos;mouseout&apos;, fnOut); } return this; }; VQuery.prototype.css=function(attr, value) { if(arguments.length==2) //设置样式 { var i = 0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i].style[attr]=value; } } else //获取样式 { if(typeof attr==&apos;string&apos;) { return getStyle(this.elements[0], attr); } else { for(i=0;i&lt;this.elements.length;i++) { var k=&apos;&apos;; for(k in attr) { this.elements[i].style[k]=attr[k]; } } } } return this; }; VQuery.prototype.toggle=function() { var i =0; var _arguments=arguments; //存在arguments为了防止调用addToggle获取不到arguments for(i=0; i&lt;this.elements.length; i++) { addToggle(this.elements[i]); } function addToggle(obj) { var count=0; myAddEvent(obj, &apos;click&apos;, function(){ _arguments[count++ % _arguments.length].call(obj); }); } return this; }; VQuery.prototype.attr=function(attr, value) { if(arguments.length==2) { var i=0; for(i=0; i&lt;this.elements.length; i++) { this.elements[i][attr]=value; //设置属性 } } else { return this.elements[0][attr]; //返回属性 } return this; }; VQuery.prototype.eq=function(n) { return $(this.elements[n]); } function appendArr(arr1, arr2) { var i=0; for(i=0; i&lt;arr2.length; i++) { arr1.push(arr2[i]); } } VQuery.prototype.find=function(str) { var i=0; var aResult=[]; for(i=0; i&lt;this.elements.length; i++) { switch(str.charAt(0)) { case &apos;.&apos;: //class var aEle=getByClass(this.elements[i], str.substring(1)); aResult=aResult.concat(aEle); break; default: //标签 var aEle=this.elements[i].getElementsByTagName(str); appendArr(aResult,aEle); } } var newVquery=$(); newVquery.elements=aResult; return newVquery; }; function getIndex(obj) { var aBrother=obj.parentNode.children; var i=0; for(i=0; i&lt;aBrother.length; i++) { if(aBrother[i]==obj) { return i; } } } VQuery.prototype.index=function() { return getIndex(this.elements[0]); } function $(vArg) { return new VQuery(vArg); }; VQuery.prototype.bind=function(sEv, fn) { var i=0; for(i=0;i&lt;this.elements.length;i++) { myAddEvent(this.elements[i], sEv, fn); } }; VQuery.prototype.extend=function(name, fn) { VQuery.prototype[name]=fn; } $().extend(&apos;size&apos;, function(){ return this.elements.length; }); $().extend(&apos;animate&apos;, function(json){ var i=0; for(i=0; i&lt;this.elements.length; i++) { startMove(this.elements[i], json); } }); ###本篇内容是根据网上视频内容学习的结果，]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F11%2F03%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
