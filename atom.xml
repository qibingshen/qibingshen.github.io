<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>河北-齐哥</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-06T08:04:33.323Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>河北-齐哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原生js封装的建议jqq库</title>
    <link href="http://yoursite.com/2016/11/06/%E5%8E%9F%E7%94%9Fjs%E5%B0%81%E8%A3%85%E7%9A%84%E5%BB%BA%E8%AE%AEjqq%E5%BA%93/"/>
    <id>http://yoursite.com/2016/11/06/原生js封装的建议jqq库/</id>
    <published>2016-11-06T07:54:44.000Z</published>
    <updated>2016-11-06T08:04:33.323Z</updated>
    
    <content type="html"><![CDATA[<p>#原生js封装的简易的jq库</p>
<p>##封装时间绑定</p>
<pre><code>function myAddEvent(obj, sEv, fn)  //事件绑定
{
    if(obj.attachEvent)
    {
        obj.attachEvent(&apos;on&apos; + sEv, function(){
            if(false==fn.call(obj))
            {
                event.cancelBubble=true;
                return false;
            };
        });
    }
    else
    {
        obj.addEventListener(sEv, function(ev){
            if(false==fn.call(obj))
            {
                ev.cancelBubble=true;
                ev.preventDefault();
            };
        }, false);
    }
};
</code></pre><p>##封装用class样式选取元素事件</p>
<pre><code>function getByClass(oParent, sClass)  //用class选取元素
{
    var aEle=oParent.getElementsByTagName(&apos;*&apos;);
    var aResult=[];
    var i=0;

    for(i=0; i&lt;aEle.length; i++)
    {
        if(aEle[i].className == sClass)
        {
            aResult.push(aEle[i]);
        }
    }
    return aResult;
};
</code></pre><p>##封装获取外联样式表样式</p>
<pre><code>function getStyle(obj, attr)  //获取样式
{
    if(obj.currentStyle)
    {
        return obj.currentStyle[attr];
    }
    else
    {
        return getComputedStyle(obj, false)[attr];
    }
};
</code></pre><p>##VQuery函数相当于jq的$符号</p>
<pre><code>function VQuery(vArg)
{
    this.elements=[];  //用来保存选中的元素

    switch(typeof vArg)
    {
        case &apos;function&apos;: //传过来的如果是个函数
            myAddEvent(window,&apos;load&apos;,vArg);
            break;
        case &apos;string&apos;:  //传过来的如果是字符串类型
            switch(vArg.charAt(0))
            {
                case &apos;#&apos;:  //ID
                    var obj=document.getElementById(vArg.substring(1));
                    this.elements.push(obj);
                    break;
                case &apos;.&apos;:  //class
                    this.elements=getByClass(document, vArg.substring(1));
                    break;
                default:  //tagName
                    this.elements=document.getElementsByTagName(vArg);
            }
            break;
        case &apos;object&apos;:
            this.elements.push(vArg);
            break;
    }
};
</code></pre><p>##在原型上添加click事件以方便后续的调用 返回this当前函数了，是为了想jq一样可以连缀的写法</p>
<pre><code>VQuery.prototype.click=function (fn)
{
    var i=0;
    for(i=0; i&lt;this.elements.length; i++)
    {
        myAddEvent(this.elements[i], &apos;click&apos;, fn);
    }
    return this;
};

VQuery.prototype.show=function()
{
    var i=0;

    for(i=0; i&lt;this.elements.length; i++)
    {
        this.elements[i].style.display = &apos;block&apos;;
    }
    return this;
};

VQuery.prototype.hide=function()
{
    var i=0;

    for(i=0; i&lt;this.elements.length; i++)
    {
        this.elements[i].style.display = &apos;none&apos;;
    }
    return this;
};

VQuery.prototype.hover=function (fnOver, fnOut)
{
    var i=0;
    for(i=0; i&lt;this.elements.length; i++)
    {
        myAddEvent(this.elements[i], &apos;mouseover&apos;, fnOver);
        myAddEvent(this.elements[i], &apos;mouseout&apos;, fnOut);
    }
    return this;
};

VQuery.prototype.css=function(attr, value)
{
    if(arguments.length==2)  //设置样式
    {
        var i = 0;
        for(i=0; i&lt;this.elements.length; i++)
        {
            this.elements[i].style[attr]=value;
        }
    }
    else  //获取样式
    {    
        if(typeof attr==&apos;string&apos;)
        {
            return getStyle(this.elements[0], attr);
        }
        else
        {
            for(i=0;i&lt;this.elements.length;i++)
            {
                var k=&apos;&apos;;
                for(k in attr)
                {
                    this.elements[i].style[k]=attr[k];
                }
            }
        }
    }

    return this;
};

VQuery.prototype.toggle=function()
{
    var i =0;
    var _arguments=arguments; //存在arguments为了防止调用addToggle获取不到arguments

    for(i=0; i&lt;this.elements.length; i++)
    {
        addToggle(this.elements[i]);
    }

    function addToggle(obj)
    {
        var count=0;
        myAddEvent(obj, &apos;click&apos;, function(){
            _arguments[count++ % _arguments.length].call(obj);
        });
    }
    return this;
};

VQuery.prototype.attr=function(attr, value)
{
    if(arguments.length==2)
    {
        var i=0;
        for(i=0; i&lt;this.elements.length; i++)
        {
            this.elements[i][attr]=value;  //设置属性
        }
    }
    else
    {
        return this.elements[0][attr];  //返回属性
    }
    return this;
};

VQuery.prototype.eq=function(n)
{
    return $(this.elements[n]);
}

function appendArr(arr1, arr2)
{
    var i=0;

    for(i=0; i&lt;arr2.length; i++)
    {
        arr1.push(arr2[i]);
    }
}

VQuery.prototype.find=function(str)
{
    var i=0;
    var aResult=[];

    for(i=0; i&lt;this.elements.length; i++)
    {
        switch(str.charAt(0))
        {
            case &apos;.&apos;:  //class
                var aEle=getByClass(this.elements[i], str.substring(1));
                aResult=aResult.concat(aEle);
                break;
            default:  //标签
                var aEle=this.elements[i].getElementsByTagName(str);
                appendArr(aResult,aEle);
        }
    }
    var newVquery=$();
    newVquery.elements=aResult;

    return newVquery;
};

function getIndex(obj)
{
    var aBrother=obj.parentNode.children;
    var i=0;

    for(i=0; i&lt;aBrother.length; i++)
    {
        if(aBrother[i]==obj)
        {
            return i;
        }
    }
}

VQuery.prototype.index=function()
{
    return getIndex(this.elements[0]);
}

function $(vArg)
{
    return new VQuery(vArg);
};

VQuery.prototype.bind=function(sEv, fn)
{
    var i=0;
    for(i=0;i&lt;this.elements.length;i++)
    {
        myAddEvent(this.elements[i], sEv, fn);
    }
};

VQuery.prototype.extend=function(name, fn)
{
    VQuery.prototype[name]=fn;
}

$().extend(&apos;size&apos;, function(){
    return this.elements.length;
});

$().extend(&apos;animate&apos;, function(json){
    var i=0;

    for(i=0; i&lt;this.elements.length; i++)
    {
        startMove(this.elements[i], json);
    }
});
</code></pre><p>###本篇内容是根据网上视频内容学习的结果，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#原生js封装的简易的jq库&lt;/p&gt;
&lt;p&gt;##封装时间绑定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function myAddEvent(obj, sEv, fn)  //事件绑定
{
    if(obj.attachEvent)
    {
        obj.attac
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/03/hello-world/"/>
    <id>http://yoursite.com/2016/11/03/hello-world/</id>
    <published>2016-11-03T15:03:59.633Z</published>
    <updated>2016-11-03T15:03:59.634Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
